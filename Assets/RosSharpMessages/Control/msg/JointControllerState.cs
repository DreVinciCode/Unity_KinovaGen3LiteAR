/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Control
{
    public class JointControllerState : Message
    {
        public const string RosMessageName = "control_msgs/JointControllerState";

        //  This message presents current controller state of one joint.
        //  Header timestamp should be update time of controller state
        public Header header { get; set; }
        //  The set point, that is, desired state.
        public double set_point { get; set; }
        //  Current value of the process (ie: latest sensor measurement on the controlled value).
        public double process_value { get; set; }
        //  First time-derivative of the process value.
        public double process_value_dot { get; set; }
        //  The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).
        public double error { get; set; }
        //  Time between two consecutive updates/execution of the control law.
        public double time_step { get; set; }
        //  Current output of the controller.
        public double command { get; set; }
        //  Current PID parameters of the controller.
        public double p { get; set; }
        public double i { get; set; }
        public double d { get; set; }
        public double i_clamp { get; set; }
        public bool antiwindup { get; set; }

        public JointControllerState()
        {
            this.header = new Header();
            this.set_point = 0.0;
            this.process_value = 0.0;
            this.process_value_dot = 0.0;
            this.error = 0.0;
            this.time_step = 0.0;
            this.command = 0.0;
            this.p = 0.0;
            this.i = 0.0;
            this.d = 0.0;
            this.i_clamp = 0.0;
            this.antiwindup = false;
        }

        public JointControllerState(Header header, double set_point, double process_value, double process_value_dot, double error, double time_step, double command, double p, double i, double d, double i_clamp, bool antiwindup)
        {
            this.header = header;
            this.set_point = set_point;
            this.process_value = process_value;
            this.process_value_dot = process_value_dot;
            this.error = error;
            this.time_step = time_step;
            this.command = command;
            this.p = p;
            this.i = i;
            this.d = d;
            this.i_clamp = i_clamp;
            this.antiwindup = antiwindup;
        }
    }
}
